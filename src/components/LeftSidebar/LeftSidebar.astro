---
import {
  removeLeadingSlash,
  removeTrailingSlash,
  getNav,
} from "../../util/util";
import SidebarContent from "./SidebarContent.astro";
export interface Props {
  currentPage: string;
}
const { currentPage } = Astro.props as Props;
const currentPageMatch = removeLeadingSlash(removeTrailingSlash(currentPage));
// Group nav menu by sections to properly render.
const sidebarSections = (await getNav()).reduce((collection, item) => {
  if ("header" in item) {
    collection.push({ ...item, children: [] });
  } else {
    collection[collection.length - 1].children.push(item);
  }
  return collection;
}, [] as Parameters<typeof SidebarContent>[0]["sidebarSections"]);
---

<nav>
  <ul class={`nav-groups`}>
    <SidebarContent
      sidebarSections={sidebarSections}
      currentPageMatch={currentPageMatch}
    />
  </ul>
</nav>

<script>
  window.addEventListener("DOMContentLoaded", () => {
    var target = document.querySelector('[data-current-parent="true"]');
    target?.scrollIntoView({ block: "center" });
  });
</script>
<style>
  nav {
    width: 100%;
    height: 100%;
    font-size: var(--theme-text-sm);
  }
  .nav-groups {
    max-height: 100%;
    overflow-x: visible;
    overflow-y: auto;
  }
  @media (min-width: 50em) {
    .nav-groups {
      position: fixed;
      top: calc(var(--theme-navbar-height) + 3rem);
      bottom: 0;
      width: calc(
        var(--theme-left-sidebar-width) - var(--min-spacing-inline) * 1.6
      );
    }
  }
  @media not screen and (min-width: 50em) {
    nav :global(.TabGroup) {
      display: none;
    }
  }
</style>
